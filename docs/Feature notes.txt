Feature notes:




compiling on pi
mkdir -p standard/gen/linux32-gnu
cd standard/gen/linux32-gnu && ( /home/ubuntu/scm/chapel-1.11.0/util/config/makeSysBasicTypes > SysCTypes.chpl || { rm -f SysCTypes.chpl && false ; } )
make[2]: [all] Error 1 (ignored)

...

causes scan of all partitions??

  var totalCounts = 0;
  for loc in Locales {
      var outerResults: [0] QueryResult;
      var preCounts = totalCounts;

      on loc {
        writeln("querying locale: ", here.id);
  
        var localResults: [0] QueryResult;
        var lq: Query = new Query();
        lq.term = query.term;
        var count = 0;
        var partFound = 0;
        local {
          for i in Partitions.domain {
            var mgrIndex = Partitions[i].read();
            if (mgrIndex != -1) {
              var preScan = count;
              for res in PartitionManagerStorage[i].query(lq) {
                localResults[count] = res;
                count += 1;
              }
              if (preScan != count) {
                partFound += 1;
              }
            }
          }
        }
        if (count > 0) {
          writeln("count: ", count);
          writeln("partFound: ", partFound);
          outerResults.domain = localResults.domain;
          for i in localResults.domain {
            outerResults[i] = localResults[i];
            totalCounts += 1;
          }
        }
      }

      if (preCounts < totalCounts) {
        for res in outerResults {
          // localeResults[totalCounts] = res;
          // totalCounts += 1;
          yield res;
        }
      }
    }

    // for res in localeResults {
    //   yield res;
    // }
  }


querying for 3
search.chpl:557: error: halt reached - zippered associative array does not match the iterated domain

...

search.chpl:312: error: 'TermEntry' used before defined (first used here)

    inline proc sortTermsByDocumentIdCount(termA: TermEntry, termB, TermEntry): (TermEntry, TermEntry) {
      var smaller = if (termA.documentIdCount.read() < termB.documentIdCount.read()) then termA else termB;
      var larger = if (smaller == termA) then termB else termA;
      return (smaller, larger);
    }

...

export CHPL_TARGET_ARCH=native

/home/ubuntu/src/chapel-1.11.0/runtime/etc/Makefile.comm-gasnet:19: /home/ubuntu/src/chapel-1.11.0/third-party/gasnet/install/linux32-gnu-native/seg-everything/nodbg/include/udp-conduit/udp-par.mak: No such file or directory
make: *** No rule to make target `/home/ubuntu/src/chapel-1.11.0/third-party/gasnet/install/linux32-gnu-native/seg-everything/nodbg/include/udp-conduit/udp-par.mak'.  Stop.
error: compiling generated source

...

--fast

warning: --specialize was set, but CHPL_TARGET_ARCH is 'unknown'. If you want any specialization to occur please set CHPL_TARGET_ARCH to a proper value.

...

$CHPL_HOME/modules/standard/IO.chpl:1691: error: sync/single variables cannot currently be written - apply readFE/readFF() to those variables first

var count$: sync int = 0;

coforall i in 1..1000 {
  writeln(i, " => ", count$);
  count$ += 1;
}

....
  // segv
  iter readFromBuff() {
    var ind = 0,
        nextVal = buff$(0);

    while (nextVal != nil) {
      yield nextVal;

      ind = (ind + 1) % buffersize;
      var state = buff$(ind).readXX();
      if state != nil {
        writeln("buff(", ind ,") = ", state);
      } else {
        writeln("buff(", ind ,") = ", "nil");
      }
      nextVal = buff$(ind);
    }

    release$ = true;
  }

...

name collision not obvious

module Logging {

  config const debug = false;
  config const info = true;

  proc debug(args ...?k) {
    // if (debug) {
    //   write(here.id, "\t");
    //   writeln((...args));
    // }
  }

  proc info(args ...?k) {
    // if (info) {
      // write(here.id, "\t");
      // writeln((...args));
    // }
  }

  proc error(args ...?k) {
    // write(here.id, "\tERROR\t");
    // writeln((...args));
  }
}

use Logging;

// proc info(args...?k) {
//   writeln((...args));
// }

proc main() {
  info("hello ", 1, " this is ", 2);

  for i in 0..numLocales-1 {
    on Locales[i] {
      info("index [", i, "] is mapped to partition ", here.id);
    }
  }
}

